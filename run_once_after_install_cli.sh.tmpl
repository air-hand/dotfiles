#!/usr/bin/env bash

set -eo pipefail

# setup path for not login shell
test -f /home/linuxbrew/.linuxbrew/bin/brew &&
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# install by brew
install_by_brew=(
    # not managed by aqua or for some reasons.
    # for vscode-neovim
    "nvim"
    "kcov"
)
for inst in "${install_by_brew[@]}"; do
    brew install $inst
done

while read -r line; do
    [[ -z "$line" ]] && continue
    [[ "$line" =~ ^# ]] && continue
    brew rm "$line" --force
done < <(cat <<EOF
aqua
EOF
)

# install aqua
if ! command -v aqua &>/dev/null; then
    curl -sSfL -O https://raw.githubusercontent.com/aquaproj/aqua-installer/v3.1.2/aqua-installer
    echo "9a5afb16da7191fbbc0c0240a67e79eecb0f765697ace74c70421377c99f0423  aqua-installer" | sha256sum -c -
    chmod +x aqua-installer
    ./aqua-installer
    rm -f ./aqua-installer
fi
export PATH=~/.local/share/aquaproj-aqua/bin:$PATH

{{ if not .is_in_container -}}
{{/* install cli globally except for a dev-container. -*/}}
# install cli globally by aqua. aqua.yaml hash: {{ include "dot_config/aquaproj-aqua/aqua.yaml" | sha256sum }}
export AQUA_GLOBAL_CONFIG=$HOME/.config/aquaproj-aqua/aqua.yaml
aqua update-aqua # update aqua itself
aqua install --all --only-link

# install cli globally by mise. mise/config-global.toml hash: {{ include "dot_config/mise/config-global.toml" | sha256sum }}
# change default env to avoid using in dev-containers as it may conflict with container tools.
MISE_JOBS=$(fgrep 'processor' /proc/cpuinfo | wc -l) MISE_CONFIG_FILE=$HOME/.config/mise/config-global.toml mise install
{{ end }}
